afterEvaluate { project ->
    def isAndroid = project.plugins.hasPlugin("com.android.library") ||
            project.plugins.hasPlugin("com.android.dynamic-feature") ||
            project.plugins.hasPlugin("com.android.application")

    def isAndroidComponent = project.plugins.hasPlugin("com.android.library") ||
            project.plugins.hasPlugin("com.android.dynamic-feature")

    def isJava = project.plugins.hasPlugin("java-library") ||
            project.plugins.hasPlugin("java")

    def isLibrary = project.plugins.hasPlugin("java-library") ||
            project.plugins.hasPlugin("com.android.library")

    def hasDokka = rootProject.plugins.hasPlugin("org.jetbrains.dokka")

    if (isAndroid || isJava) {
        setupModule(isAndroid, isAndroidComponent)
        setupCommonTasks(isAndroid)
        setupKapt(project)

        apply from: gradle.extended.files.sonarqube
        apply from: gradle.extended.files.jacoco
    }

    if (isLibrary) {
        apply from: gradle.extended.files.license
    }

    if (isLibrary && hasDokka) {
        apply from: gradle.extended.files.dokka
        apply from: gradle.extended.files.dokkaProject
    }

    apply from: gradle.extended.files.ktlint
    apply from: gradle.extended.files.detekt
}

def minSdk = project.ext.has("minSdkVersion")
        ? project.ext.minSdkVersion
        : "${additionals.versions.minSdkVersion.get()}"

def setupModule(isAndroid, isAndroidComponent) {
    def javaVersion = JavaVersion.toVersion(additionals.versions.java.get())

    if (isAndroid) {
        android {
            compileSdk Integer.parseInt(additionals.versions.compileSdkVersion.get())

            defaultConfig {
                minSdkVersion additionals.versions.minSdkVersion.get()
                targetSdkVersion Integer.parseInt(additionals.versions.targetSdkVersion.get())

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                if (isAndroidComponent) {
                    consumerProguardFiles "consumer-rules.pro"
                }
            }

            buildTypes {
                debug.testCoverageEnabled true
                if (isAndroidComponent) {
                    release.minifyEnabled false
                }
            }

            compileOptions {
                coreLibraryDesugaringEnabled true
                sourceCompatibility javaVersion
                targetCompatibility javaVersion
            }

            kotlin {
                sourceSets {
                    debug {
                        kotlin.srcDir("build/generated/ksp/debug/kotlin")
                    }
                    release {
                        kotlin.srcDir("build/generated/ksp/release/kotlin")
                    }
                }
            }

            lintOptions {
                abortOnError true
                checkDependencies true
                checkReleaseBuilds false
                checkAllWarnings false
                ignoreTestSources true
                warningsAsErrors false
                disable = [
                        "GoogleAppIndexingWarning",
                        "GradleDependency",
                        "JavaPluginLanguageLevel",
                        "LockedOrientationActivity",
                        "NewerVersionAvailable",
                        "UnusedIds"
                ]
            }

            dependencies {
                coreLibraryDesugaring additionals.desugarJdkLibs
            }

            testOptions {
                unitTests.returnDefaultValues = true
                unitTests.all {
                    useJUnitPlatform()
                    maxParallelForks = Runtime.runtime.availableProcessors() - 1
                }
            }
        }

        dependencies {
            androidTestImplementation additionals.androidx.test.rules
            androidTestImplementation additionals.androidx.test.runner
            androidTestImplementation additionals.androidx.test.ext.junit
            androidTestImplementation additionals.androidx.espresso.core
            androidTestImplementation additionals.kotlinx.coroutines.test
            androidTestImplementation additionals.mockito.android
            androidTestImplementation additionals.androidx.test.core.ktx

            testImplementation additionals.androidx.test.ext.junit
            testImplementation additionals.junit.jupiter.api
            testRuntimeOnly additionals.junit.jupiter.engine
            testImplementation additionals.junit.jupiter.params
            testRuntimeOnly additionals.junit.vintage.engine
            testImplementation additionals.mockito.core
            testImplementation additionals.mockito.kotlin
            testImplementation additionals.kotlinx.coroutines.test
        }
    } else {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion

        test {
            maxParallelForks = Runtime.runtime.availableProcessors() - 1
            maxHeapSize = "256m"
        }
    }
}

def setupCommonTasks(isAndroid) {
    if (isAndroid) {
        def unitTestsTasks = project.ext.has("optionalUnitTestTasks") ? project.ext.optionalUnitTestTasks : ["testDebugUnitTest"]

        tasks.register("unitTest") { task ->
            task.dependsOn(unitTestsTasks)
        }
    } else {
        tasks.register("unitTest") { task ->
            task.dependsOn('test')
        }
    }

    def javaVersion = additionals.versions.java.get()
    try {
        def klass = Class.forName("org.jetbrains.kotlin.gradle.tasks.KotlinCompile")
        tasks.withType(klass).configureEach {
            kotlinOptions {
                jvmTarget = javaVersion
            }
        }
    } catch (Throwable ignored) {
        // nothing
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }
}

// https://www.zacsweers.dev/kapts-hidden-test-costs/
def setupKapt(project) {
    if (project.name != "sample" || project.name != "app") {
        tasks
                .matching { it.name.startsWith("kapt") && it.name.endsWith("TestKotlin") }
                .configureEach { it.enabled = false }
    }
}
